// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestTask.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Testing a checkout system for a restaurant")]
    [NUnit.Framework.CategoryAttribute("automated")]
    public partial class TestingACheckoutSystemForARestaurantFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "automated"};
        
#line 1 "ChekoutBill.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Testing a checkout system for a restaurant", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table6.AddRow(new string[] {
                        "starter",
                        "4"});
            table6.AddRow(new string[] {
                        "main",
                        "7"});
            table6.AddRow(new string[] {
                        "drink",
                        "2.5"});
            table6.AddRow(new string[] {
                        "drinks discount",
                        "30"});
            table6.AddRow(new string[] {
                        "discount hours",
                        "19:00"});
            table6.AddRow(new string[] {
                        "service charge on food",
                        "10"});
#line 5
 testRunner.Given("The restaurant set cost is", ((string)(null)), table6, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User verifies the total bill amount is calculated correctly")]
        [NUnit.Framework.CategoryAttribute("scenario1")]
        public void UserVerifiesTheTotalBillAmountIsCalculatedCorrectly()
        {
            string[] tagsOfScenario = new string[] {
                    "scenario1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User verifies the total bill amount is calculated correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table7.AddRow(new string[] {
                            "starter",
                            "4"});
                table7.AddRow(new string[] {
                            "main",
                            "4"});
                table7.AddRow(new string[] {
                            "drink",
                            "4"});
#line 16
 testRunner.When("Group of people makes an order \'without\' discount hours using", ((string)(null)), table7, "When ");
#line hidden
#line 21
 testRunner.Then("the bill is calculated and has a value \'58.40\' pounds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User verifies the total bill amount is calculated correctly when ordering at diff" +
            "erent discount period")]
        [NUnit.Framework.CategoryAttribute("scenario2")]
        public void UserVerifiesTheTotalBillAmountIsCalculatedCorrectlyWhenOrderingAtDifferentDiscountPeriod()
        {
            string[] tagsOfScenario = new string[] {
                    "scenario2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User verifies the total bill amount is calculated correctly when ordering at diff" +
                    "erent discount period", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table8.AddRow(new string[] {
                            "starter",
                            "1"});
                table8.AddRow(new string[] {
                            "main",
                            "2"});
                table8.AddRow(new string[] {
                            "drink",
                            "2"});
#line 25
 testRunner.When("Group of people makes an order \'before\' discount hours using", ((string)(null)), table8, "When ");
#line hidden
#line 30
 testRunner.Then("the bill is calculated and has a value \'23.3\' pounds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table9.AddRow(new string[] {
                            "starter",
                            "0"});
                table9.AddRow(new string[] {
                            "main",
                            "2"});
                table9.AddRow(new string[] {
                            "drink",
                            "2"});
#line 31
 testRunner.When("Group of people makes an order \'after\' discount hours using", ((string)(null)), table9, "When ");
#line hidden
#line 36
 testRunner.Then("the bill is calculated and has a value \'43.7\' pounds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User verifies the total bill amount is calculated correctly in case of partial or" +
            "der cancellation")]
        [NUnit.Framework.CategoryAttribute("scenario3")]
        public void UserVerifiesTheTotalBillAmountIsCalculatedCorrectlyInCaseOfPartialOrderCancellation()
        {
            string[] tagsOfScenario = new string[] {
                    "scenario3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User verifies the total bill amount is calculated correctly in case of partial or" +
                    "der cancellation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table10.AddRow(new string[] {
                            "starter",
                            "4"});
                table10.AddRow(new string[] {
                            "main",
                            "4"});
                table10.AddRow(new string[] {
                            "drink",
                            "4"});
#line 40
 testRunner.When("Group of people makes an order \'after\' discount hours using", ((string)(null)), table10, "When ");
#line hidden
#line 45
 testRunner.Then("the bill is calculated and has a value \'58.4\' pounds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table11.AddRow(new string[] {
                            "starter",
                            "1"});
                table11.AddRow(new string[] {
                            "main",
                            "1"});
                table11.AddRow(new string[] {
                            "drink",
                            "1"});
#line 46
 testRunner.When("Group of people cancel an order \'after\' discount hours using", ((string)(null)), table11, "When ");
#line hidden
#line 51
 testRunner.Then("the bill is calculated and has a value \'43.8\' pounds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
