// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestTask.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Testing a checkout system for a restaurant by determining the discount according " +
        "to the system time")]
    public partial class TestingACheckoutSystemForARestaurantByDeterminingTheDiscountAccordingToTheSystemTimeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CheckoutBillSystemTime.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Testing a checkout system for a restaurant by determining the discount according " +
                    "to the system time", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table1.AddRow(new string[] {
                        "starter",
                        "4"});
            table1.AddRow(new string[] {
                        "main",
                        "7"});
            table1.AddRow(new string[] {
                        "drink",
                        "2.5"});
            table1.AddRow(new string[] {
                        "drinks discount",
                        "30"});
            table1.AddRow(new string[] {
                        "discount hours",
                        "19:00"});
            table1.AddRow(new string[] {
                        "service charge on food",
                        "10"});
#line 6
 testRunner.Given("The restaurant set cost is", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User verifies the total bill amount is calculated correctly by determining the di" +
            "scount according to the system time")]
        [NUnit.Framework.CategoryAttribute("scenario4")]
        public void UserVerifiesTheTotalBillAmountIsCalculatedCorrectlyByDeterminingTheDiscountAccordingToTheSystemTime()
        {
            string[] tagsOfScenario = new string[] {
                    "scenario4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User verifies the total bill amount is calculated correctly by determining the di" +
                    "scount according to the system time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table2.AddRow(new string[] {
                            "starter",
                            "4"});
                table2.AddRow(new string[] {
                            "main",
                            "4"});
                table2.AddRow(new string[] {
                            "drink",
                            "4"});
#line 17
 testRunner.When("Group of people makes an order using", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table3.AddRow(new string[] {
                            "discountTrue",
                            "55.4"});
                table3.AddRow(new string[] {
                            "discountFalse",
                            "58.4"});
#line 22
 testRunner.Then("the bill is calculated and has the following value of pounds", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table4.AddRow(new string[] {
                            "starter",
                            "1"});
                table4.AddRow(new string[] {
                            "main",
                            "1"});
                table4.AddRow(new string[] {
                            "drink",
                            "1"});
#line 26
 testRunner.When("Group of people cancel an order using", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table5.AddRow(new string[] {
                            "discountTrue",
                            "41.55"});
                table5.AddRow(new string[] {
                            "discountFalse",
                            "43.8"});
#line 31
 testRunner.Then("the bill is calculated and has the following value of pounds", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
